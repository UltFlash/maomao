-------------------         TA4SP             --------------------
Tree Automata, Abstractions and Approximation to Automatically 
                     verify Security Protocols
------------------------------------------------------------------


includes binaries:

- timbuktool: Binary resulting from a tree automata library (Timbuk) 
          developed by Th. Genet (available at http://www.irisa.fr/lande/genet/timbuk/). 
          This binary includes Timbuk2 and an extension allowing to handle symbolic 
          approximations (developed by Y. Boichut).

- translatortoolvbin: A translator from the Intermediate Format (IF) to 
          an input languages supported by Timbuk.

- ta4spv2: The main binary from which the verification is started.



In the next sections we successively give:
- quick presentation of the approach
- instructions to use TA4SP (options description and how to install TA4SP)
- Output returned
- limitations
- instructions in order to install TA4SP on your computer


* APPROACH:

TA4SP is a tool based on rewriting on regular tree languages modeled by 
tree automata. 
The knowledge of the intruder is represented by a tree language. The main idea 
is to compute the intruder knowledge when there are an unbounded number of 
sessions of a given protocol (using abstractions). 
Since the computation may not terminate - the calculus is known to be undecidable - 
we practically compute an over-approximation of the intruder knowledge. Thus, 
one may prove that an information cannot be known by the intruder for the initial 
state specified by an HLPSL modeler. 
Otherwise we can compute several under-approximations in order 
to show potential attacks (modulo the abstractions done). 

The only property verified is SECRECY.


* INSTRUCTIONS:


ta4spv2 [options] [IF file]
options:
         --2AgentsOnly    Use the abstraction according to the result of
                          Common and Cortier
         --level I
                          if I = 0 then an over-approximation is computed.
                          if I > 0 then an under-approximation is computed.
         --CoarserAbstractions
			  Stronger abstractions as default ones are used to represent fresh data. 
			  This option can be very useful to show the lack of attack against 
			  a protocol. Otherwise, it can lead to some false attacks. This option 
			  allows also to improve computation times. 
         --output DIR     
			  set the output directory to DIR.  Namely any 
                          file generated by TA4SP will be written in such 
                          a directory.
                          (Default: . directory where the ta4spv2 binary
                          is located.)

The option --2AgentsOnly transforms the initial state defined by a modeler 
in an initial state where there are only 'a' (an honest agent) and 'i' 
the intruder. Usually, this abstraction make the computation faster. For instance,
for the SHARE protocol, computation time is: 
	- 8.92 seconds with abstractions
        - 120.11 seconds without.

The option --CoarserAbstractions melt several fresh data into a single one. 
This kind of abstraction can be useful to prove the lack of attack for a given protocol. 


Concerning the option --level I, a small 'I' (>0) makes a small under-approximation. 
For instance, to show that there is an attack in the NSPK protocol, an under-approximation of 
level 7 is required. 

Notice that an intuitive use of TA4SP is to initially compute an over-approximation. Thus, 
if a secret information is in the over-approximated knowledge of the intruder then the user 
can successively compute under-approximations as long as times are still reasonable and no 
interesting results are found. Notice also that sometime a secret information can be in the 
approximated language and then it is impossible to find an under-approximated language 
containing this information.


* OUTPUT:

The TA4SP output is composed by 8 sections:
- SUMMARY: SAFE | UNSAFE | INCONCLUSIVE
- DETAILS: OVER_APPROXIMATION | UNDER_APPROXIMATION | TYPED_MODEL | UNBOUNDED_NUMBER_OF_SESSIONS | NOT_SUPPORTED
- PROTOCOL: Name of the protocol checked
- GOAL: Properties taken into account during the verification
- BACKEND: Name of the tool used for the verification
- COMMENTS: Some useful information about the status of the verification
- STATISTICS: Several statistics set by the tool during the verification
- TRACE: Attack trace when a protocol is flawed. Notice that the current version of 
	 TA4SP does not return an attack trace yet.


This is an example of an OUTPUT for the NSPK protocol 


SUMMARY
INCONCLUSIVE

DETAILS
OVER_APPROXIMATION
UNBOUNDED_NUMBER_OF_SESSIONS
TYPED_MODEL

PROTOCOL
./IF/NSPK.if.ta4sp

GOAL
SECRECY

BACKEND
TA4SP

COMMENTS
Use an under-approximation in order to show a potential attack
The intruder might know some critical information


STATISTICS
Translation: 0.00 seconds
Computation 5.90 seconds


TRACE
No Trace can be provided with the current version.



* LIMITATIONS:

TA4SP does not support:
- xor operator
- exp operator
- sets
- some protocols such that the input generated for timbuk does not 
respect some critical conditions in rewriting with tree automata.


Notice that several protocols are uncheckable in a reasonable time due to 
a complex term rewriting system or automata with a large number of 
transitions.


* HOW TO INSTALL TA4SP?

This version of TA4SP works only in a UNIX environment. 
The binaries (timbuktool, translatortoolbin and ta4spv2) must be 
pasted in the same directory and not renamed. 
Finally, set the environment variable PATH such that 

export PATH=$PATH:absolute_path_ta4sp_directory

where absolute_path_ta4sp_directory is the directory in which 
timbuktool, translatortoolbin and ta4spv2 have been pasted.

-----------------------------------------------------------------------


Bug Report: Please report comments and bugs to
boichut@lifc.univ-fcomte.fr 

